@use 'foundation/base';
// foundation 안의 _base 파일을 사용한다.

$font-stack: Helvetica, sans-serif;
$primary-color: red;

.font {
  font: 100% $font-stack;
  color: $primary-color;
}

.text {
  font : 100% $font-stack;
}

// nav 안의 자식들에 대한 css 부여
nav {
  ul {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  li { display: inline-block; }

  a {
    display: block;
    padding: 6px 12px;
    text-decoration: none;
  }
}

.inverse {
  background-color: base.$primary-color;
  color: white;
}


// 어떤 변수를 변수처럼 받고, 그 변수를 이용해서 style을 뱉어준다.
// mixin으로 만든 theme라는 값은 다른 컴포넌트에서 include라는 이름으로 쓸 수 있다.
@mixin theme($theme: DarkGray) {
  background: $theme;
  box-shadow: 0 0 1px rgba($theme, .25);
  color: #fff;
}

.info {
  @include theme;
}
.alert {
  @include theme($theme: DarkRed);
}
.success {
  @include theme($theme: DarkGreen);
}


/* This CSS will print because %message-shared is extended. */
%message-shared {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

// extend를 사용하여 %message-shared의 기본 속성들을 공통적으로 가져오고, 따로 css 추가 가능
// %를 사용하고, extend로 쓸 수 있다.
.message {
  @extend %message-shared;
}

.success2 {
  @extend %message-shared;
  border-color: green;
}

.error {
  @extend %message-shared;
  border-color: red;
}

.warning {
  @extend %message-shared;
  border-color: yellow;
}

// @if , @else, @for, @while 사용 가능
@mixin avatar($size, $circle: false) {
  width: $size;
  height: $size;
  background-color: aqua;
  @if $circle {
    border-radius: $size / 2;
  }
}

.square-av {
  @include avatar(100px, $circle: false);
}
.circle-av {
  @include avatar(100px, $circle: true);
}

// @for : 1에서 $exponent 까지 계속 곱한다.
@function pow($base, $exponent) {
  $result: 1;
  @for $_ from 1 through $exponent {
    $result: $result * $base;
  }
  @return $result;
}

.sidebar {
  float: left;
  margin-left: pow(4, 3) * 1px;
  width : 100px;
  height : 100px;
  background-color: beige;
}


// css 에서 문제가 생겼을때에도 error를 발생시켜 보여줄 수 있다.
@mixin reflexive-position($property, $value) {
  @if $property != left and $property != right {
    @error "Property #{$property} must be either left or right.";
  }

  $left-value: if($property == right, initial, $value);
  $right-value: if($property == right, $value, initial);

  left: $left-value;
  right: $right-value;
  [dir=rtl] & {
    left: $right-value;
    right: $left-value;
  }
}

.sidebar {
  @include reflexive-position(left, 12px);
  //       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  // Error: Property top must be either left or right.
}

// interpolation
@mixin prefix($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: $value;
  }
  #{$property}: $value;
}

.gray {
  @include prefix(filter, grayscale(50%), moz webkit);
}

.button{
  @include prefix(background, linear-gradient(red,yellow) , moz webkit o ms)
}